---
namespace: ParseStatement
expectation: Fail
outputs:
  - "Error [EPAR0370014]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | let mut x = expr;\n     | ^^^^^^^\nError [EPAR0370005]: expected : -- got '='\n    --> test:1:11\n     |\n   1 | let mut x = expr;\n     |           ^"
  - "Error [EPAR0370014]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | let mut x = ();\n     | ^^^^^^^\nError [EPAR0370005]: expected : -- got '='\n    --> test:1:11\n     |\n   1 | let mut x = ();\n     |           ^"
  - "Error [EPAR0370014]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | let mut x = x+y;\n     | ^^^^^^^\nError [EPAR0370005]: expected : -- got '='\n    --> test:1:11\n     |\n   1 | let mut x = x+y;\n     |           ^"
  - "Error [EPAR0370014]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | let mut x = (x,y);\n     | ^^^^^^^\nError [EPAR0370005]: expected : -- got '='\n    --> test:1:11\n     |\n   1 | let mut x = (x,y);\n     |           ^"
  - "Error [EPAR0370014]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | let mut x = x();\n     | ^^^^^^^\nError [EPAR0370005]: expected : -- got '='\n    --> test:1:11\n     |\n   1 | let mut x = x();\n     |           ^"
  - "Error [EPAR0370014]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | const mut x = expr;\n     | ^^^^^^^^^\nError [EPAR0370005]: expected : -- got '='\n    --> test:1:13\n     |\n   1 | const mut x = expr;\n     |             ^"
  - "Error [EPAR0370014]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | const mut x = ();\n     | ^^^^^^^^^\nError [EPAR0370005]: expected : -- got '='\n    --> test:1:13\n     |\n   1 | const mut x = ();\n     |             ^"
  - "Error [EPAR0370014]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | const mut x = x+y;\n     | ^^^^^^^^^\nError [EPAR0370005]: expected : -- got '='\n    --> test:1:13\n     |\n   1 | const mut x = x+y;\n     |             ^"
  - "Error [EPAR0370014]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | const mut x = (x,y);\n     | ^^^^^^^^^\nError [EPAR0370005]: expected : -- got '='\n    --> test:1:13\n     |\n   1 | const mut x = (x,y);\n     |             ^"
  - "Error [EPAR0370014]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | const mut x = x();\n     | ^^^^^^^^^\nError [EPAR0370005]: expected : -- got '='\n    --> test:1:13\n     |\n   1 | const mut x = x();\n     |             ^"
  - "Error [EPAR0370014]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | let mut x: u32 = expr;\n     | ^^^^^^^"
  - "Error [EPAR0370014]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | let mut x: u32 = ();\n     | ^^^^^^^\nError [EPAR0370005]: expected A valid expression. -- got 'A tuple expression.'\n    --> test:1:18\n     |\n   1 | let mut x: u32 = ();\n     |                  ^^"
  - "Error [EPAR0370014]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | let mut x: u32 = x+y;\n     | ^^^^^^^"
  - "Error [EPAR0370014]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | let mut x: u32 = (x,y);\n     | ^^^^^^^\nError [EPAR0370005]: expected A valid expression. -- got 'A tuple expression.'\n    --> test:1:18\n     |\n   1 | let mut x: u32 = (x,y);\n     |                  ^^^^^"
  - "Error [EPAR0370014]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | let mut x: u32 = x();\n     | ^^^^^^^"
  - "Error [EPAR0370014]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | const mut x: u32 = expr;\n     | ^^^^^^^^^"
  - "Error [EPAR0370014]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | const mut x: u32 = ();\n     | ^^^^^^^^^\nError [EPAR0370005]: expected A valid expression. -- got 'A tuple expression.'\n    --> test:1:20\n     |\n   1 | const mut x: u32 = ();\n     |                    ^^"
  - "Error [EPAR0370014]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | const mut x: u32 = x+y;\n     | ^^^^^^^^^"
  - "Error [EPAR0370014]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | const mut x: u32 = (x,y);\n     | ^^^^^^^^^\nError [EPAR0370005]: expected A valid expression. -- got 'A tuple expression.'\n    --> test:1:20\n     |\n   1 | const mut x: u32 = (x,y);\n     |                    ^^^^^"
  - "Error [EPAR0370014]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | const mut x: u32 = x();\n     | ^^^^^^^^^"
  - "Error [EPAR0370009]: unexpected string: expected 'ident', got ','\n    --> test:1:10\n     |\n   1 | let (x,y,,) = ();\n     |          ^"
  - "Error [EPAR0370009]: unexpected string: expected 'ident', got ','\n    --> test:1:6\n     |\n   1 | let (,x,y) = ();\n     |      ^"
  - "Error [EPAR0370009]: unexpected string: expected 'ident', got ','\n    --> test:1:8\n     |\n   1 | let (x,,y) = ();\n     |        ^"
  - "Error [EPAR0370005]: expected 'i8', 'i16', 'i32', 'i64', 'i128', 'u8', 'u16', 'u32', 'u64', 'u128', 'field', 'group', 'address', 'bool' -- got '['\n    --> test:1:8\n     |\n   1 | let x: [u8; (2,,)] = [[0,0], [0,0]];\n     |        ^"
  - "Error [EPAR0370005]: expected 'i8', 'i16', 'i32', 'i64', 'i128', 'u8', 'u16', 'u32', 'u64', 'u128', 'field', 'group', 'address', 'bool' -- got 'const'\n    --> test:1:8\n     |\n   1 | let x: const = expr;\n     |        ^^^^^"
  - "Error [EPAR0370005]: expected 'i8', 'i16', 'i32', 'i64', 'i128', 'u8', 'u16', 'u32', 'u64', 'u128', 'field', 'group', 'address', 'bool' -- got 'let'\n    --> test:1:10\n     |\n   1 | const x: let = expr;\n     |          ^^^"
  - "Error [EPAR0370005]: expected 'i8', 'i16', 'i32', 'i64', 'i128', 'u8', 'u16', 'u32', 'u64', 'u128', 'field', 'group', 'address', 'bool' -- got 'mut'\n    --> test:1:8\n     |\n   1 | let x: mut = expr;\n     |        ^^^"
  - "Error [EPAR0370009]: unexpected string: expected 'ident', got '<eof>'\n    --> test:1:1\n     |\n   1 | let\n     | ^^^"
  - "Error [EPAR0370005]: expected : -- got '<eof>'\n    --> test:1:5\n     |\n   1 | let x\n     |     ^"
  - "Error [EPAR0370005]: expected 'i8', 'i16', 'i32', 'i64', 'i128', 'u8', 'u16', 'u32', 'u64', 'u128', 'field', 'group', 'address', 'bool' -- got '<eof>'\n    --> test:1:6\n     |\n   1 | let x:\n     |      ^"
  - "Error [EPAR0370005]: expected : -- got '='\n    --> test:1:7\n     |\n   1 | let x = (a, y]);\n     |       ^"
  - "Error [EPAR0370009]: unexpected string: expected 'ident', got '='\n    --> test:1:5\n     |\n   1 | let = 1u8;\n     |     ^"
  - "Error [EPAR0370009]: unexpected string: expected 'ident', got ';'\n    --> test:1:4\n     |\n   1 | let;\n     |    ^"
  - "Error [EPAR0370005]: expected : -- got '1'\n    --> test:1:7\n     |\n   1 | let x 1u8;\n     |       ^"
  - "Error [EPAR0370005]: expected = -- got ';'\n    --> test:1:10\n     |\n   1 | let x: u8;\n     |          ^"
  - "Error [EPAR0370005]: expected = -- got '<eof>'\n    --> test:1:8\n     |\n   1 | let x: u8\n     |        ^^"
  - "Error [EPAR0370005]: expected 'i8', 'i16', 'i32', 'i64', 'i128', 'u8', 'u16', 'u32', 'u64', 'u128', 'field', 'group', 'address', 'bool' -- got '='\n    --> test:1:8\n     |\n   1 | let x: = 1;\n     |        ^"
  - "Error [EPAR0370005]: expected 'i8', 'i16', 'i32', 'i64', 'i128', 'u8', 'u16', 'u32', 'u64', 'u128', 'field', 'group', 'address', 'bool' -- got '['\n    --> test:1:8\n     |\n   1 | let x: [u8] = 1;\n     |        ^"
  - "Error [EPAR0370005]: expected 'i8', 'i16', 'i32', 'i64', 'i128', 'u8', 'u16', 'u32', 'u64', 'u128', 'field', 'group', 'address', 'bool' -- got '['\n    --> test:1:8\n     |\n   1 | let x: [u8;\n     |        ^"
  - "Error [EPAR0370005]: expected 'i8', 'i16', 'i32', 'i64', 'i128', 'u8', 'u16', 'u32', 'u64', 'u128', 'field', 'group', 'address', 'bool' -- got '['\n    --> test:1:8\n     |\n   1 | let x: [u8; 1u8] = [1,\n     |        ^"
  - "Error [EPAR0370009]: unexpected string: expected 'expression', got ']'\n    --> test:1:15\n     |\n   1 | let dbg: u8 = ];\n     |               ^"
  - "Error [EPAR0370030]: Could not lex the following content: `ðŸ¦€: u8 = 0;`."
  - "Error [EPAR0370039]: do not put parens around single variable names\n    --> test:1:6\n     |\n   1 | let (x) = ...;\n     |      ^\nError [EPAR0370005]: expected : -- got '='\n    --> test:1:9\n     |\n   1 | let (x) = ...;\n     |         ^"
  - "Error [EPAR0370039]: do not put parens around single variable names\n    --> test:1:6\n     |\n   1 | let (x,) = ...;\n     |      ^\nError [EPAR0370005]: expected : -- got '='\n    --> test:1:10\n     |\n   1 | let (x,) = ...;\n     |          ^"
